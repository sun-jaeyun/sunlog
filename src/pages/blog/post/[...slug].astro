---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import type { GetStaticPaths } from 'astro';
import Document from '../../../layouts/Document.astro';
import Head from '../../../layouts/Head.astro';
import Post from '../../../components/Post.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import PostNavigator from '../../../components/PostNavigator.astro';

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await getCollection('blog').then((data) =>
    data.sort((a, b) => a.data.publishedAt.valueOf() - b.data.publishedAt.valueOf()),
  );
  const encodedPosts = posts.map((post) => {
    const { id, ...slug } = post;
    return { id: encodeURI(id), ...slug };
  });

  return [
    ...posts.map((post, index) => ({
      params: { slug: post.id },
      props: {
        post,
        prevPost: index > 0 ? posts.at(index - 1) : undefined,
        nextPost: index < posts.length - 1 ? posts.at(index + 1) : undefined,
      },
    })),
    ...encodedPosts.map((post, index) => ({
      params: { slug: post.id },
      props: {
        post,
        prevPost: index > 0 ? encodedPosts.at(index - 1) : undefined,
        nextPost: index < encodedPosts.length - 1 ? encodedPosts.at(index + 1) : undefined,
      },
    })),
  ];
};
type Props = {
  post: CollectionEntry<'blog'>;
  prevPost?: CollectionEntry<'blog'>;
  nextPost?: CollectionEntry<'blog'>;
};

const { post, prevPost, nextPost } = Astro.props;
const { id, data } = post;
const { Content, headings } = await render(post);
---

<Document>
  <Head
    title={`${data.category.id} - ${data.title}`}
    description={data.description}
    image={`/blog/image/${id}.png`}
  />
  <body>
    <Header />
    <Post headings={headings} {...data}>
      <Content />
    </Post>
    <PostNavigator prevPost={prevPost} nextPost={nextPost} />
    <Footer />
  </body>
</Document>
